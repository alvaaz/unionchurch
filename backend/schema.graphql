# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Redirect {
  id: ID!
  source: String
  destination: String
}

input RedirectWhereUniqueInput {
  id: ID
  source: String
}

input RedirectWhereInput {
  AND: [RedirectWhereInput!]
  OR: [RedirectWhereInput!]
  NOT: [RedirectWhereInput!]
  id: IDFilter
  source: StringFilter
  destination: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input RedirectOrderByInput {
  id: OrderDirection
  source: OrderDirection
  destination: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RedirectUpdateInput {
  source: String
  destination: String
}

input RedirectUpdateArgs {
  where: RedirectWhereUniqueInput!
  data: RedirectUpdateInput!
}

input RedirectCreateInput {
  source: String
  destination: String
}

type Person {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input PersonWhereUniqueInput {
  id: ID
  email: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input PersonUpdateInput {
  name: String
  email: String
  password: String
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  email: String
  password: String
}

type Ministry {
  id: ID!
  name: String
  slug: String
  photo: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input MinistryWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input MinistryWhereInput {
  AND: [MinistryWhereInput!]
  OR: [MinistryWhereInput!]
  NOT: [MinistryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
}

input MinistryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input MinistryUpdateInput {
  name: String
  slug: String
  photo: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input MinistryUpdateArgs {
  where: MinistryWhereUniqueInput!
  data: MinistryUpdateInput!
}

input MinistryCreateInput {
  name: String
  slug: String
  photo: Upload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createRedirect(data: RedirectCreateInput!): Redirect
  createRedirects(data: [RedirectCreateInput!]!): [Redirect]
  updateRedirect(where: RedirectWhereUniqueInput!, data: RedirectUpdateInput!): Redirect
  updateRedirects(data: [RedirectUpdateArgs!]!): [Redirect]
  deleteRedirect(where: RedirectWhereUniqueInput!): Redirect
  deleteRedirects(where: [RedirectWhereUniqueInput!]!): [Redirect]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createMinistry(data: MinistryCreateInput!): Ministry
  createMinistries(data: [MinistryCreateInput!]!): [Ministry]
  updateMinistry(where: MinistryWhereUniqueInput!, data: MinistryUpdateInput!): Ministry
  updateMinistries(data: [MinistryUpdateArgs!]!): [Ministry]
  deleteMinistry(where: MinistryWhereUniqueInput!): Ministry
  deleteMinistries(where: [MinistryWhereUniqueInput!]!): [Ministry]
  endSession: Boolean!
  authenticatePersonWithPassword(email: String!, password: String!): PersonAuthenticationWithPasswordResult
  createInitialPerson(data: CreateInitialPersonInput!): PersonAuthenticationWithPasswordSuccess!
}

union PersonAuthenticationWithPasswordResult = PersonAuthenticationWithPasswordSuccess | PersonAuthenticationWithPasswordFailure

type PersonAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Person!
}

type PersonAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialPersonInput {
  name: String
  email: String
  password: String
}

type Query {
  redirects(where: RedirectWhereInput! = {}, orderBy: [RedirectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RedirectWhereUniqueInput): [Redirect!]
  redirect(where: RedirectWhereUniqueInput!): Redirect
  redirectsCount(where: RedirectWhereInput! = {}): Int
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  ministries(where: MinistryWhereInput! = {}, orderBy: [MinistryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MinistryWhereUniqueInput): [Ministry!]
  ministry(where: MinistryWhereUniqueInput!): Ministry
  ministriesCount(where: MinistryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Person

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
